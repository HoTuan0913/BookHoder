// <auto-generated />
using System;
using BookHolder.Areas.Admin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookHolder.Migrations
{
    [DbContext(typeof(BookholderContext))]
    partial class BookholderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Brithday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ExportStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ImportHoseId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreHouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImportHoseId");

                    b.HasIndex("StoreHouseId");

                    b.ToTable("ExportStores");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.FileImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileImages");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ImportHose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImportHoseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreHouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreHouseId");

                    b.ToTable("ImportHoses");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Invoice_details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoicesId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("productsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoicesId");

                    b.HasIndex("productsId");

                    b.ToTable("Invoice_Details");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Invoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("TransactStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("TransactStatusId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportStoresId")
                        .HasColumnType("int");

                    b.Property<int?>("FileImageId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("StoreHouseId")
                        .HasColumnType("int");

                    b.Property<int>("View_Product")
                        .HasColumnType("int");

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("productTypeId")
                        .HasColumnType("int");

                    b.Property<string>("release")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExportStoresId");

                    b.HasIndex("FileImageId");

                    b.HasIndex("StoreHouseId");

                    b.HasIndex("productTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.SaleOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateTimeStrart")
                        .HasColumnType("datetime2");

                    b.Property<int>("intSale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SaleOffs");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.StoreHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarehouseOwner")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StoreHouses");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.TransactStatus", b =>
                {
                    b.Property<int>("TransactStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactStatusId");

                    b.ToTable("TransactStatuses");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.UserEvaluates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeEvaluates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomersId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("StarQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ProductsId");

                    b.ToTable("UserEvaluates");
                });

            modelBuilder.Entity("ExportStoreInvoices", b =>
                {
                    b.Property<int>("ExportStoresId")
                        .HasColumnType("int");

                    b.Property<int>("InvoicesId")
                        .HasColumnType("int");

                    b.HasKey("ExportStoresId", "InvoicesId");

                    b.HasIndex("InvoicesId");

                    b.ToTable("ExportStoreInvoices");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Customers", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.Role", "Role")
                        .WithMany("customers")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ExportStore", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.ImportHose", "ImportHose")
                        .WithMany("ExportStores")
                        .HasForeignKey("ImportHoseId");

                    b.HasOne("BookHolder.Areas.Admin.Models.StoreHouse", "StoreHouse")
                        .WithMany()
                        .HasForeignKey("StoreHouseId");

                    b.Navigation("ImportHose");

                    b.Navigation("StoreHouse");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ImportHose", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.StoreHouse", "StoreHouse")
                        .WithMany("ImportHoses")
                        .HasForeignKey("StoreHouseId");

                    b.Navigation("StoreHouse");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Invoice_details", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.Invoices", "Invoices")
                        .WithMany("Invoice_Details")
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHolder.Areas.Admin.Models.Products", "products")
                        .WithMany("Invoice_Details")
                        .HasForeignKey("productsId");

                    b.Navigation("Invoices");

                    b.Navigation("products");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Invoices", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.Customers", "customers")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomersId");

                    b.HasOne("BookHolder.Areas.Admin.Models.TransactStatus", "TransactStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("TransactStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customers");

                    b.Navigation("TransactStatus");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Products", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.ExportStore", "ExportStores")
                        .WithMany("Products")
                        .HasForeignKey("ExportStoresId");

                    b.HasOne("BookHolder.Areas.Admin.Models.FileImage", "FileImage")
                        .WithMany("Customers")
                        .HasForeignKey("FileImageId");

                    b.HasOne("BookHolder.Areas.Admin.Models.StoreHouse", "StoreHouse")
                        .WithMany("Products")
                        .HasForeignKey("StoreHouseId");

                    b.HasOne("BookHolder.Areas.Admin.Models.ProductType", "productType")
                        .WithMany("Products")
                        .HasForeignKey("productTypeId");

                    b.Navigation("ExportStores");

                    b.Navigation("FileImage");

                    b.Navigation("productType");

                    b.Navigation("StoreHouse");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.UserEvaluates", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.Customers", "Customers")
                        .WithMany("UserEvaluates")
                        .HasForeignKey("CustomersId");

                    b.HasOne("BookHolder.Areas.Admin.Models.Products", "Products")
                        .WithMany("UserEvaluates")
                        .HasForeignKey("ProductsId");

                    b.Navigation("Customers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ExportStoreInvoices", b =>
                {
                    b.HasOne("BookHolder.Areas.Admin.Models.ExportStore", null)
                        .WithMany()
                        .HasForeignKey("ExportStoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookHolder.Areas.Admin.Models.Invoices", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Customers", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("UserEvaluates");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ExportStore", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.FileImage", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ImportHose", b =>
                {
                    b.Navigation("ExportStores");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Invoices", b =>
                {
                    b.Navigation("Invoice_Details");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Products", b =>
                {
                    b.Navigation("Invoice_Details");

                    b.Navigation("UserEvaluates");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.Role", b =>
                {
                    b.Navigation("customers");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.StoreHouse", b =>
                {
                    b.Navigation("ImportHoses");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookHolder.Areas.Admin.Models.TransactStatus", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
